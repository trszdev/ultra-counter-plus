{"version":3,"sources":["Components/GroupColumn/index.tsx","Util/generated-datatypes-interfaces.ts","Util/session-json-loader.ts","Util/datatypes.ts","Util/downloader.ts","Components/Menu/index.tsx","Util/storage.ts","Components/SessionScreen/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GroupColumn","this","props","group","session","workstate","itemGroups","filter","item","groupId","id","map","count","itemCounts","isDecrementing","didUpdateWorkstate","value","groupCounts","settings","itemStyle","width","itemWidthPx","height","itemHeightPx","marginLeft","itemHorizontalSpacingPx","marginRight","marginTop","itemSpacingPx","marginBottom","className","style","fontSize","groupFontSizePx","mnemonic","counterFontSizePx","getItemCounts","onClick","didTapItem","itemFontSizePx","Component","exportedTypeSuite","Group","t","ItemGroup","Settings","Workstate","Session","checkers","createCheckers","generatedTypeInterfaces","loadSessionFromJson","jsonString","json","JSON","parse","error","validate","Error","path","message","sessionToJson","stringify","createSampleSession","name","Chance","word","length","groups","alertThresholds","push","openJsonFile","a","Promise","res","rej","input","document","createElement","type","accept","onchange","files","file","reader","FileReader","onerror","onload","readerEvent","target","result","readAsText","click","Menu","text","alert","didUpdateSession","jsonText","fileName","blob","Blob","fileSaver","saveFileAs","updateCurrentSession","didChangeCountMode","groupIdToItemGroups","forEach","itemGroup","list","Object","values","flatMap","sort","b","confirm","downloadSession","bind","uploadSession","toggleCountMode","sortItems","resetCounts","placeholder","mode","theme","onChange","didChangeText","showPrintMargin","showGutter","highlightActiveLine","setOptions","showLineNumbers","tabSize","useWorker","PersistentStorage","localStorage","setItem","getItem","SessionScreen","state","isMenu","newSession","alertGroups","entries","threshold","find","x","Boolean","join","setState","instance","store","App","load","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.607e161a.chunk.js","sourcesContent":["import { Component, CSSProperties } from 'react'\r\nimport { Group, ItemGroup, Session, Workstate } from '../../Util/datatypes'\r\nimport './index.css'\r\n\r\nexport interface Props {\r\n    isDecrementing: boolean,\r\n    group: Group\r\n    session: Session,\r\n    didUpdateWorkstate: (workstate: Workstate) => void\r\n}\r\n\r\nexport class GroupColumn extends Component<Props> {\r\n    getItemCounts(): { item: ItemGroup, count: number }[] {\r\n        const { group, session: { workstate, itemGroups } } = this.props\r\n        return itemGroups\r\n            .filter(item => item.groupId === group.id)\r\n            .map(item => ({ item, count: workstate.itemCounts[item.id] || 0 }))\r\n    }\r\n\r\n    didTapItem(item: ItemGroup) {\r\n        const { isDecrementing, didUpdateWorkstate, session: { workstate } } = this.props\r\n        const value = isDecrementing ? -1 : 1\r\n        workstate.itemCounts[item.id] = (workstate.itemCounts[item.id] || 0) + value\r\n        workstate.groupCounts[item.groupId] = (workstate.groupCounts[item.groupId] || 0) + value\r\n        didUpdateWorkstate(workstate)\r\n    }\r\n\r\n    render() {\r\n        const { group, session: { settings, workstate } } = this.props\r\n        const itemStyle: CSSProperties = {\r\n            width: settings.itemWidthPx,\r\n            height: settings.itemHeightPx,\r\n            marginLeft: settings.itemHorizontalSpacingPx,\r\n            marginRight: settings.itemHorizontalSpacingPx,\r\n            marginTop: settings.itemSpacingPx,\r\n            marginBottom: settings.itemSpacingPx,\r\n        }\r\n        return <div className='group-column'>\r\n            <div className='group-column-header' style={itemStyle}>\r\n                <div className='group-column-header-title' style={{fontSize: settings.groupFontSizePx}}>\r\n                    {group.mnemonic}\r\n                </div>\r\n                <div className='group-column-header-count' style={{fontSize: settings.counterFontSizePx}}>\r\n                    {workstate.groupCounts[group.id] || 0}\r\n                </div>\r\n            </div>\r\n            <div className='group-column-items'>\r\n                {this.getItemCounts().map(({ item, count }) => {\r\n                    return <div onClick={() => this.didTapItem(item)} key={item.id}\r\n                        className='group-column-item' style={itemStyle}>\r\n                            <div className='group-column-item-name' style={{fontSize: settings.itemFontSizePx}}>\r\n                                {item?.mnemonic}\r\n                            </div>\r\n                            <div className='group-column-item-count' style={{fontSize: settings.counterFontSizePx}}>\r\n                                {count}\r\n                            </div>\r\n                    </div>\r\n                })}\r\n            </div>\r\n        </div>\r\n    }\r\n}","/**\n * This module was automatically generated by `ts-interface-builder`\n */\nimport * as t from \"ts-interface-checker\";\n// tslint:disable:object-literal-key-quotes\n\nexport const Group = t.iface([], {\n  \"id\": \"string\",\n  \"name\": \"string\",\n  \"mnemonic\": \"string\",\n});\n\nexport const ItemGroup = t.iface([\"Group\"], {\n  \"groupId\": \"string\",\n});\n\nexport const Settings = t.iface([], {\n  \"alertThresholds\": \"any\",\n  \"itemWidthPx\": \"number\",\n  \"itemHeightPx\": \"number\",\n  \"itemSpacingPx\": \"number\",\n  \"itemHorizontalSpacingPx\": \"number\",\n  \"counterFontSizePx\": \"number\",\n  \"itemFontSizePx\": \"number\",\n  \"groupFontSizePx\": \"number\",\n});\n\nexport const Workstate = t.iface([], {\n  \"itemCounts\": \"any\",\n  \"groupCounts\": \"any\",\n});\n\nexport const Session = t.iface([], {\n  \"name\": \"string\",\n  \"groups\": t.array(\"Group\"),\n  \"itemGroups\": t.array(\"ItemGroup\"),\n  \"settings\": \"Settings\",\n  \"workstate\": \"Workstate\",\n});\n\nconst exportedTypeSuite: t.ITypeSuite = {\n  Group,\n  ItemGroup,\n  Settings,\n  Workstate,\n  Session,\n};\nexport default exportedTypeSuite;\n","import { createCheckers } from 'ts-interface-checker'\r\nimport generatedTypeInterfaces from './generated-datatypes-interfaces'\r\nimport { Session } from './datatypes'\r\n\r\nconst checkers = createCheckers(generatedTypeInterfaces)\r\n\r\nexport const loadSessionFromJson = (jsonString: string): { session?: Session, error?: Error } => {\r\n    let json\r\n    try {\r\n        json = JSON.parse(jsonString)\r\n    } catch (error) {\r\n        return { error }\r\n    }\r\n    const error = checkers.Session.validate(json)\r\n    if (error !== null) {\r\n        return { error: new Error(`Not valid session: ${error.path} ${error.message}`) }\r\n    }\r\n    const session = json as Session\r\n    return { session }\r\n}\r\n\r\nexport const sessionToJson = (session: Session): string =>\r\n    JSON.stringify(session, null, 2)\r\n\r\n","import { Chance } from 'chance'\r\n\r\nexport interface Group {\r\n    id: string\r\n    name: string\r\n    mnemonic: string\r\n}\r\n\r\nexport interface ItemGroup extends Group {\r\n    groupId: string\r\n}\r\n\r\nexport interface Settings {\r\n    alertThresholds: { [groupId: string]: number }\r\n    itemWidthPx: number\r\n    itemHeightPx: number\r\n    itemSpacingPx: number\r\n    itemHorizontalSpacingPx: number\r\n    counterFontSizePx: number\r\n    itemFontSizePx: number\r\n    groupFontSizePx: number\r\n}\r\n\r\nexport interface Workstate {\r\n    itemCounts: { [itemId: string]: number }\r\n    groupCounts: { [groupId: string]: number }\r\n}\r\n\r\nexport interface Session {\r\n    name: string\r\n    groups: Group[]\r\n    itemGroups: ItemGroup[]\r\n    settings: Settings\r\n    workstate: Workstate\r\n}\r\n\r\nexport const createEmptySession = (): Session => {\r\n    const chance = new Chance()\r\n    const settings: Settings = {\r\n        alertThresholds: {},\r\n        itemFontSizePx: 12,\r\n        itemHeightPx: 50,\r\n        itemHorizontalSpacingPx: 10,\r\n        itemSpacingPx: 20,\r\n        itemWidthPx: 50,\r\n        counterFontSizePx: 12,\r\n        groupFontSizePx: 12,\r\n    }\r\n    return {\r\n        name: chance.word({ length: 6 }),\r\n        groups: [],\r\n        itemGroups: [],\r\n        settings,\r\n        workstate: { itemCounts: {}, groupCounts: {} }\r\n    }\r\n}\r\n\r\nexport const createSampleSession = (): Session => {\r\n    const session = createEmptySession()\r\n    session.groups.push({ id: 'group_id1', mnemonic: 'group1', name: 'ID 1 - GROUP' })\r\n    session.groups.push({ id: 'group_id2', mnemonic: 'group2', name: 'ID 2 - GROUP' })\r\n    session.itemGroups.push({ id: 'item1', groupId: 'group_id1', mnemonic: 'itm1', name: 'Item 1' })\r\n    session.itemGroups.push({ id: 'item2', groupId: 'group_id1', mnemonic: 'itm2', name: 'Item 2' })\r\n    session.itemGroups.push({ id: 'item3', groupId: 'group_id1', mnemonic: 'itm3', name: 'Item 3' })\r\n    session.itemGroups.push({ id: 'item4', groupId: 'group_id2', mnemonic: 'itm4', name: 'Item 4' })\r\n    session.workstate.itemCounts['item3'] = 1\r\n    session.workstate.groupCounts['group_id1'] = 1\r\n    session.settings.alertThresholds['group_id1'] = 500\r\n    return session\r\n}\r\n","import * as fileSaver from 'file-saver'\r\n\r\nexport const saveFileAs = (jsonText: string, fileName: string) => {\r\n    const blob = new Blob([jsonText], {type: 'application/json;charset=utf-8'})\r\n    fileSaver.saveAs(blob, `${fileName}.json`)\r\n}\r\n\r\nexport const openJsonFile = async () => new Promise<string>((res, rej) => {\r\n    const input = document.createElement('input')\r\n    input.type = 'file'\r\n    input.accept = '.json'\r\n    input.onchange = () => { \r\n        if (input.files === null) return\r\n        const file = input.files[0]\r\n        const reader = new FileReader()\r\n        reader.onerror = rej\r\n        reader.onload = readerEvent => {\r\n            const jsonString = readerEvent.target?.result + ''\r\n            res(jsonString)\r\n        }\r\n        reader.readAsText(file, 'UTF-8')\r\n    }\r\n    input.click()\r\n})\r\n","import { Component } from 'react'\r\nimport { ItemGroup, Session } from '../../Util/datatypes'\r\nimport AceEditor from 'react-ace'\r\nimport { loadSessionFromJson, sessionToJson } from '../../Util/session-json-loader'\r\nimport { createSampleSession } from '../../Util/datatypes'\r\nimport './index.css'\r\nimport 'ace-builds/src-noconflict/mode-json'\r\nimport 'ace-builds/src-noconflict/theme-github'\r\nimport { saveFileAs, openJsonFile } from '../../Util/downloader'\r\n\r\n\r\nexport interface Props {\r\n    session: Session\r\n    isDecrementing: boolean\r\n    didUpdateSession: (session: Session) => void\r\n    didChangeCountMode: (isDecrementing: boolean) => void\r\n}\r\n\r\nexport class Menu extends Component<Props> {\r\n    private text: string\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.text = sessionToJson(props.session)\r\n    }\r\n\r\n    updateCurrentSession(text?: string) {\r\n        const { error, session } = loadSessionFromJson(text || this.text)\r\n        if (error) {\r\n            alert(error.message)\r\n            return\r\n        }\r\n        this.props.didUpdateSession(session as Session)\r\n        alert('Session updated')\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.text = sessionToJson(this.props.session)\r\n    }\r\n\r\n    downloadSession() {\r\n        saveFileAs(this.text, this.props.session.name)\r\n    }\r\n\r\n    async uploadSession() {\r\n        const jsonString = await openJsonFile()\r\n        this.updateCurrentSession(jsonString)\r\n    }\r\n\r\n    toggleCountMode() {\r\n        this.props.didChangeCountMode(!this.props.isDecrementing)\r\n    }\r\n\r\n    sortItems() {\r\n        const { session } = this.props\r\n        const { workstate: { itemCounts } } = session\r\n        const groupIdToItemGroups: { [groupId: string]: ItemGroup[] } = {}\r\n        session.itemGroups.forEach(itemGroup => {\r\n            const list = groupIdToItemGroups[itemGroup.groupId] || []\r\n            list.push(itemGroup)\r\n            groupIdToItemGroups[itemGroup.groupId] = list\r\n        })\r\n        session.itemGroups = Object.values(groupIdToItemGroups).flatMap(itemGroups => \r\n            itemGroups.sort((b, a) => (itemCounts[a.id] || 0) - (itemCounts[b.id] || 0))\r\n        )\r\n        this.props.didUpdateSession(session)\r\n    }\r\n\r\n    resetCounts() {\r\n        if (!confirm('Do you really want to reset all progress?')) { //eslint-disable-line no-restricted-globals\r\n            return\r\n        }\r\n        const { session } = this.props\r\n        session.workstate.itemCounts = {}\r\n        session.workstate.groupCounts = {}\r\n        this.props.didUpdateSession(session)\r\n    }\r\n\r\n    didChangeText(text: string) {\r\n        this.text = text \r\n    }\r\n\r\n    render() {\r\n        const { isDecrementing } = this.props\r\n        return <div className='menu'>\r\n            <div className='menu-buttons'>\r\n                <button onClick={() => this.updateCurrentSession()}>Update current session</button>\r\n                <button onClick={this.downloadSession.bind(this)}>Download session</button>\r\n                <button onClick={this.uploadSession.bind(this)}>Open session</button>\r\n                <button onClick={this.toggleCountMode.bind(this)}>\r\n                    {isDecrementing ? 'Increment mode' : 'Decrement mode'}\r\n                </button>\r\n                <button onClick={this.sortItems.bind(this)}>Sort items</button>\r\n                <button onClick={this.resetCounts.bind(this)}>Reset progress</button>\r\n            </div>\r\n            <div className='menu-editor'>\r\n                <AceEditor placeholder={placeholder} mode='json' theme='github' name='menu-editor-ace'\r\n                    onChange={this.didChangeText.bind(this)} fontSize={14} showPrintMargin={true} showGutter={true}\r\n                    highlightActiveLine={true} value={sessionToJson(this.props.session)}\r\n                    setOptions={{showLineNumbers: true, tabSize: 2, useWorker: false}} />\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nconst placeholder = sessionToJson(createSampleSession())\r\n","import { Session } from './datatypes'\r\nimport { sessionToJson, loadSessionFromJson } from './session-json-loader'\r\n\r\nexport interface Storage {\r\n    store(session: Session): void\r\n    load(): Session | null\r\n}\r\n\r\nexport class PersistentStorage implements Storage {\r\n    store(session: Session) {\r\n        localStorage.setItem('last_session', sessionToJson(session))\r\n    }\r\n\r\n    load(): Session | null {\r\n        const jsonString = localStorage.getItem('last_session')\r\n        if (jsonString === null) {\r\n            return null\r\n        }\r\n        const { session, error } = loadSessionFromJson(jsonString)\r\n        if (error) {\r\n            return null\r\n        }\r\n        return session as Session\r\n    }\r\n\r\n    static instance(): Storage {\r\n        return new PersistentStorage()\r\n    }\r\n}\r\n","import { Component } from 'react'\r\nimport { GroupColumn } from '../GroupColumn'\r\nimport { Menu } from '../Menu'\r\nimport { Group, Session, Workstate } from '../../Util/datatypes'\r\nimport { PersistentStorage } from '../../Util/storage'\r\nimport './index.css'\r\n\r\nexport interface Props {\r\n    session: Session\r\n}\r\n\r\nexport interface State extends Props {\r\n    isMenu: boolean\r\n    isDecrementing: boolean\r\n}\r\n\r\nexport class SessionScreen extends Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props)\r\n        this.state = { session: props.session, isMenu: false, isDecrementing: false }\r\n    }\r\n\r\n    didUpdateWorkstate(workstate: Workstate, session?: Session) {\r\n        const newSession = session || this.state.session\r\n        const { groups, settings } = newSession\r\n        const alertGroups = Object.entries(settings.alertThresholds)\r\n            .map(([groupId, threshold]) => {\r\n                const groupCount = workstate.groupCounts[groupId] || 0\r\n                return groupCount >= threshold ? groups.find(x => x.id === groupId) : null\r\n            })\r\n            .filter(Boolean) as [Group]\r\n        if (alertGroups.length > 0) {\r\n            alertGroups.forEach(group => delete settings.alertThresholds[group.id])\r\n            alert(`Threshold reached for: ${alertGroups.map(x => x.name).join(', ')}`)\r\n        }\r\n        this.setState({ session: newSession })\r\n        PersistentStorage.instance().store(newSession)\r\n    }\r\n\r\n    didUpdateSession(session: Session) {\r\n        this.didUpdateWorkstate(session.workstate, session)\r\n    }\r\n\r\n    didChangeCountMode(isDecrementing: boolean) {\r\n        this.setState({ isDecrementing: isDecrementing, isMenu: false })\r\n    }\r\n\r\n    render() {\r\n        const { isMenu, isDecrementing, session } = this.state\r\n        return <div className='session-screen'>\r\n            <div className={`session-screen-toolbar ${isDecrementing ? 'decrementing' : 'incrementing'}`}>\r\n                <div className='session-screen-toolbar-name'>Session: {session.name}</div>\r\n                <div onClick={() => this.setState({ isMenu: !isMenu })}\r\n                    className={`session-screen-toolbar-btn ${isMenu ? 'close' : 'menu'}`}/>\r\n            </div>\r\n            {isMenu ? \r\n                <Menu isDecrementing={isDecrementing} session={session}\r\n                    didChangeCountMode={this.didChangeCountMode.bind(this)}\r\n                    didUpdateSession={this.didUpdateSession.bind(this)} /> :\r\n                <div className='session-screen-board'>\r\n                    {session.groups.map(group =>\r\n                        <GroupColumn key={group.id} isDecrementing={isDecrementing} group={group} session={session}\r\n                            didUpdateWorkstate={this.didUpdateWorkstate.bind(this)} />\r\n                    )}\r\n                </div>\r\n            }\r\n        </div>\r\n    }\r\n}\r\n","import { SessionScreen } from './Components/SessionScreen'\nimport { createSampleSession } from './Util/datatypes'\nimport { PersistentStorage } from './Util/storage'\n\nexport const App = () => {\n    const session = PersistentStorage.instance().load() || createSampleSession()\n    return <SessionScreen session={session} />\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}